import synch;

const MAX = 2;
const NACCOUNTS = 2;
const NPROCESSES = 2;
mutex = Lock();
def transfer(a1, a2, amount):
    lock(?mutex);
    lock(?accounts[a1].lock);
    if (amount <= accounts[a1].balance) and (accounts[a2].lock == False):
        assert(accounts[a1].lock == True);
        accounts[a1].balance -= amount; 
        lock(?accounts[a2].lock);
        accounts[a2].balance += amount; 
        unlock(?accounts[a2].lock);
        result = True;
    else:
        result = False;
    ;
    unlock(?accounts[a1].lock);
    unlock(?mutex);
;


def total():
    lock(?mutex);
    let current_sum = 0:
        for i in {0..NACCOUNTS-1}:
            current_sum += accounts[i].balance;    
        ;
        result = current_sum;
    ;
    unlock(?mutex);
;

def process():
    let a1 = choose({0..NACCOUNTS-1})
    let a2 = choose({0..NACCOUNTS-1} - { a1 }):
        transfer(a1, a2, choose({0..MAX}));
    ;
;

def checker():
    let account_sum_now = total():
        assert account_sum_now == account_sum;    
    ;
;

accounts = [ dict{ .lock: Lock(), .balance: choose({0..MAX}) }
                for i in {0..NACCOUNTS-1} ]
;

account_sum = total();

for i in {1..NPROCESSES}:
    spawn process();
    spawn checker();
;

# for i in {1..NPROCESSES}:
#     spawn checker();
# ;

